const { expect } = require("chai");
const { ethers } = require("hardhat");
const {
  loadFixture,
} = require("@nomicfoundation/hardhat-toolbox/network-helpers");

describe("xdc zero endpoint", () => {
  let endpoint;

  const fixture = async () => {
    const EthereumTrieDBLiberary = await hre.ethers.getContractFactory(
      "EthereumTrieDB"
    );

    const EthereumTrieDB = await EthereumTrieDBLiberary.deploy();

    await EthereumTrieDB.deployed();

    const liberary = await hre.ethers.getContractFactory("MerklePatricia", {
      libraries: { EthereumTrieDB: EthereumTrieDB.address },
    });
    const merklePatricia = await liberary.deploy();

    await merklePatricia.deployed();

    const factory = await hre.ethers.getContractFactory("Endpoint", {
      libraries: { MerklePatricia: merklePatricia.address },
    });

    const endpoint = await factory.deploy();

    return { endpoint };
  };

  beforeEach("deploy fixture", async () => {
    ({ endpoint } = await loadFixture(fixture));
  });

  describe("test endpoint", () => {
    it("should get tx", async () => {
      const rlp = await endpoint.getRlp(
        "0x01",
        [
          "0xf851a07468b1a7fb4c2fbb60afe0fe84f1b21467e155b71f2332dd67f9697cb073a34080808080808080a07a0d7016fc18273674a495d3787342ee1fc7697524b3215a16b594711ad260b18080808080808080",
          "0xf9015131b9014df9014a02840ee6b28082743794c14e52e40f35cb6ea673c5485bee89d50c7a947080b8e4312ef0c600000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000011100000000000000000000000000000000000000000000000000000000000000820796a0a5a5e612a90eee26b4dd4bf941de1b14cb037aba079cff06b2ee3a184bab6fc3a06b372e61bda1099802dbcb596f07a04893cc4d7a7eef9a7fe96538c26e9505d6",
        ],
        "0xcd81f13c4d3c14e98771a23d93de046e35ab20acc845063385de4e51ae84fd15"
      );

      const tx = await endpoint.getTransaction(rlp);

      expect(tx.to).to.equal("0xC14e52e40F35Cb6ea673c5485BEE89D50C7a9470");
    });

    it("should get receipt", async () => {
      const rlp = await endpoint.getRlp(
        "0x01",
        [
          "0xf851a0802286d3b4d4553f4298f58b0d49869284fb3d72cbe04fb4babf315bb8dcd00e80808080808080a075199a8074701b5331331f47a6af7c618b03190fdab9615f091e12f7709ff1ab8080808080808080",
          "0xf904ce31b904caf904c70182b786bf903bdf903ba94c14e52e40f35cb6ea673c5485bee89d50c7a9470e1a0e9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82b903800000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000034000000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000271f9026e31b9026af9026701827437bf9015df9015a94c14e52e40f35cb6ea673c5485bee89d50c7a9470e1a0e9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82b90120000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000",
        ],
        "0x78f7156cd14954500e3fce2e74241590bf214b034f4d6a7fb0dd2c4422b0e5e0"
      );

      const receipt = await endpoint.getReceipt(rlp);

      const payload = await endpoint.getPayload(receipt.logs[0].data);

      expect(payload.sid).to.equal(1);
      expect(payload.sua).to.equal(
        "0x4E448D3D631Bd4b6D61A136Cc200F648Cc335e25"
      );
      expect(payload.rid).to.equal(1);
      expect(payload.rua).to.equal(
        "0x4E448D3D631Bd4b6D61A136Cc200F648Cc335e25"
      );

      expect(payload.data).to.equal(
        "0xf9026e31b9026af9026701827437bf9015df9015a94c14e52e40f35cb6ea673c5485bee89d50c7a9470e1a0e9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82b90120000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000011100000000000000000000000000000000000000000000000000000000000000"
      );
    });
  });
});
