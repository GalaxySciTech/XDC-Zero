const { expect } = require("chai");
const { ethers } = require("hardhat");
const {
  loadFixture,
} = require("@nomicfoundation/hardhat-toolbox/network-helpers");

describe("xdc zero endpoint", () => {
  let endpoint;

  const fixture = async () => {
    const EthereumTrieDBLiberary = await hre.ethers.getContractFactory(
      "EthereumTrieDB"
    );

    const EthereumTrieDB = await EthereumTrieDBLiberary.deploy();

    await EthereumTrieDB.deployed();

    const liberary = await hre.ethers.getContractFactory("MerklePatricia", {
      libraries: { EthereumTrieDB: EthereumTrieDB.address },
    });
    const merklePatricia = await liberary.deploy();

    await merklePatricia.deployed();

    const factory = await hre.ethers.getContractFactory("Endpoint", {
      libraries: { MerklePatricia: merklePatricia.address },
    });

    const endpoint = await factory.deploy();

    return { endpoint };
  };

  beforeEach("deploy fixture", async () => {
    ({ endpoint } = await loadFixture(fixture));
  });

  describe("test endpoint", () => {
    it("should get tx", async () => {
      const rlp = await endpoint.getRlp(
        "0x01",
        [
          "0xf851a0d4a35ca33d25d8d03cc1916ec394827d1c8fb519c8b50e9eed18ea26bd85c03a80808080808080a05c61a668c5f527c14178cf55adcc3f7bef45f10d7b6b9d4a889af6ce397d97c28080808080808080",
          "0xf903b231b903aef903ab03840ee6b28082b78694c14e52e40f35cb6ea673c5485bee89d50c7a947080b90344312ef0c600000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000271f9026e31b9026af9026701827437bf9015df9015a94c14e52e40f35cb6ea673c5485bee89d50c7a9470e1a0e9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82b90120000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000011100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000820795a04cf08af8f11be2494ddf63473812ef2a26787c5a702c1f8b318ea77a5982bac2a0248bb61f18c0a285f9a5a0669b31b27648505930de401bd230bfb8b8542263ad",
        ],
        "0xb09af36eb223060b43755da2256611c776c95d5ac7517ccccf60f56a81cdded9"
      );

      const tx = await endpoint.getTransaction(rlp);

      expect(tx.to).to.equal("0xC14e52e40F35Cb6ea673c5485BEE89D50C7a9470");
    });

    it("should get receipt", async () => {
      const rlp = await endpoint.getRlp(
        "0x01",
        [
          "0xf851a016a9d9208369077f3733ad22e707f90139e49e3f4a13d46edfb39b25782b86cf80808080808080a075199a8074701b5331331f47a6af7c618b03190fdab9615f091e12f7709ff1ab8080808080808080",
          "0xf9026e31b9026af9026701827133b9010000000000000000000400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000280000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000f9015df9015a946722a605566c4fccf5fe634aab41dff6a3d40532e1a0e9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82b90120000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000003b90000000000000000000000006722a605566c4fccf5fe634aab41dff6a3d4053200000000000000000000000000000000000000000000000000000000000002270000000000000000000000008007a89389bcb22c478b66339350d33ae04fdf5a00000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000004f8a8fd6d00000000000000000000000000000000000000000000000000000000",
        ],
        "0x5ac6403540b3c2112f73b53f09948a26091525633ab1bbd753eb4de5507b8484"
      );

      const receipt = await endpoint.getReceipt(rlp);

      const payload = await endpoint.getPayload(receipt.logs[0].data);

      console.log(payload);

      //   expect(payload.sid).to.equal(1);
      //   expect(payload.sua).to.equal(
      //     "0x4E448D3D631Bd4b6D61A136Cc200F648Cc335e25"
      //   );
      //   expect(payload.rid).to.equal(1);
      //   expect(payload.rua).to.equal(
      //     "0x4E448D3D631Bd4b6D61A136Cc200F648Cc335e25"
      //   );

      //   expect(payload.data).to.equal(
      //     "0xf9026e31b9026af9026701827437bf9015df9015a94c14e52e40f35cb6ea673c5485bee89d50c7a9470e1a0e9bded5f24a4168e4f3bf44e00298c993b22376aad8c58c7dda9718a54cbea82b90120000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000e000000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000010000000000000000000000004e448d3d631bd4b6d61a136cc200f648cc335e2500000000000000000000000000000000000000000000000000000000000000a000000000000000000000000000000000000000000000000000000000000000011100000000000000000000000000000000000000000000000000000000000000"
      //   );
    });

    it("should validate success", async () => {
      const ruaFactory = await hre.ethers.getContractFactory("RUA");

      const rua = await ruaFactory.deploy();

      await rua.deployed();

      const oracleFactory = await hre.ethers.getContractFactory(
        "FullCheckpoint"
      );

      const oracle = await oracleFactory.deploy();

      await oracle.deployed();

      await oracle.addRoot(
        "0x7a123212e4a0290e43ee2272bc662b952d0140380339d3ca95fa4507fa1b6ac6",
        "0xd44c70fd6520564ee1190942c607d71b3be5c86f4293000a4b93d56411a16415",
        "0xd44c70fd6520564ee1190942c607d71b3be5c86f4293000a4b93d56411a16415",
        "0x4e176733f32cd7b273bebabc12b999ec42c54c622446eb764d438d814185b2e1"
      );

      endpoint.registerChain(953, oracle.address, rua.address);
    });
  });
});
